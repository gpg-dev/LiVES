= Technical Specification =

Weed API Version Changes
------------------------
100 - first release
110 - added WEED_PARAMETER_ELEMENT_PER_CHANNEL
120 - added WEED_YUV_CLAMPING and WEED_YUV_SUBSPACE
130 - added WEED_CHANNEL_RESIZE_ON_ROWSTRIDES_CHANGE
131 - added WEED_FILTER_PROCESS_LAST, removed WEED_COLORSPACE_HSV
132 - added threading hint, and later WEED_CHANNEL_ALPHA_PREMULT
133 - added gamma correction, package_name

200 - separated WEED_API_VERSION and WEED_FILTER_API_VERSION.

Updated WEED_API_VERSION to 200
  - added weed_leaf_flag_set(), weed_leaf_flag_get(). Filter API changes are listed below.
  - Added typedef for weed_realloc_f.

Possibly non-backwards compatible:
  - removed weed_leaf_set_caller(),
  - changed meaning of return value from weed_leaf_element_size() for WEED_SEED_VOIDPTR
  - WEED_SEED_VOIDPTR will now be cast to / from uint64_t instead of void *.
  - added WEED_VOIDPTR_SIZE, defined as sizeof(void *)
  - changed typedef for weed_size_t to be uint32_t, (replacing size_t in previous versions)
  - added typedef for weed_error_t as int32_t, (replacing int in previous versions)


Changelog:
21/04/06 salsaman.
Added notes about WEED_PLANT_UNKNOWN, clarified "max_repeats" for
filters, clarified number of elements in parameter_template
"default". Removed "TODO" from refs. to Weed EVENTS spec. Version number unchanged.

14/08/06 salsaman
Allow channels based on templates with "max_repeats" to be disabled at
any time, even if the template is not marked "optional". Version
number unchanged.

20/08/06 salsaman
Small change to description of "max_repeats". Number of channels may
only be _reduced_ after init(); and only by setting "disabled" to WEED_TRUE. Version
number unchanged.

22/08/06 salsaman
Added "new_default" leaf for parameter templates which have the
WEED_PARAMETER_VARIABLE_ELEMENTS flag set. Version number unchanged.

24/08/06 salsaman
Added "ignore" leaf for parameters for use in interpolation where the
"value" contains a list. Version number unchanged. Removed
WEED_PLANT_UNKNOWN since it is not part of the API.

24/09/06 salsaman
Corrected/clarified some parts of the text. API unchanged.

30/10/06 salsaman
Add host-only function weed_leaf_delete(). Since it is host only, API
version is unchanged.

11/12/06 salsaman
Added WEED_CHANNEL_FOLLOWS_OUTPUT and
WEED_PARAMETER_ELEMENT_PER_CHANNEL. Updated spec to 1.1 and API
version to 110.

13/12/06 salsaman
Add optional "target_fps" to filter_instance, change it from an array to a
single value. API version unchanged.

25/07/07 salsaman
Add filter flag WEED_FILTER_HINT_IS_POINT_EFFECT. API version unchanged.

27/03/08 salsaman
Corrected some typos and clarified about passing function pointers.

07/06/08 salsaman
Updated to libweed. Spec is now at version 3.0. Moved text around to split into Weed and
Weed Effects.

14/06/08 salsaman
Add YUV_clamping, YUV_subspace. Remove "h_shift" and "v_shift". Allow
generators to set channel sizes, but they should attempt to use the
host set size. Clarified some points. API version was updated to 120.

03/11/08 salsaman
Removed requirement that weed plugin file extensions be .wo, since this was discovered to be non-portable.

11/10/09 salsaman
Correct a typo, and try to further clarify about function passing.

31/10/09 salsaman
Correct WEED_FILTER_HINT_STATELESS -> WEED_FILTER_HINT_IS_STATELESS

9/11/09
Added WEED_CHANNEL_RESIZE_ON_ROWSTRIDES_CHANGE
API Version to 130

5/02/10 salsaman
Clarified text about default getter and bootstrap process.

7/02/10 salsaman
Removed WEED_COLORSPACE_HSV, deprecated WEED_FILTER_FOLLOWS_OUTPUT, 
added WEED_FILTER_PROCESS_LAST

16/04/10 salsaman
Clarified meaning of YUV_subspace

22/09/10 salsaman
Clarified YUV_subsampling, *changed value of default*.

21/10/10 salsaman
Clarified text about plugin data and icon directories.

17/03/11 salsaman
Switched WEED_FILTER_HINT_IS_POINT_EFFECT to WEED_FILTER_HINT_NO_THREADING **

6/08/11 salsaman
Corrected spelling error WEED_HINT_INT -> WEED_HINT_INTEGER

7/01/12 salsaman
Add clarifying notes about out parameters.

19/01/12 salsaman
Add channel flag WEED_CHANNEL_ALPHA_PREMULT. API unchanged.

23/01/12 salsaman
Clarified range for AFLOAT.

29/07/12 salsaman
** Corrected name of flag and description to WEED_FILTER_HINT_MAY_THREAD

15/11/12 salsaman
added clarifying remarks for number of values in parameter defaults.

01/03/13 salsaman
corrected description about static function versions

17/03/13 salsaman
added "extra_authors" leaf for plugin_info. Corrected description about static functions for plugins.
added "rowstride_alignment_hint" for channel templates.

17/09/2013 salsaman
Clarified description of "group" leaf for WEED_HINT_SWITCH parameter templates.

12/10/2013 salsaman
Add "hidden" option to filter_class gui.

30/09/2014 salsaman
Add missing type documentation for "fps".

04/03/2016 salsaman
Add optional "copyright" leaf to PLUGIN_INFO.


28/10/2019 salsaman
Version 2.0. Spec changes:
Added 2 new functions, weed_leaf_set_voidptr_sizes() and weed_leaf_get_all().
Allow plugins access to weed_plant_free().
Changed return value from weed_leaf_element_size() for WEED_SEED_VOIDPTR (now returns the data size rather than sizeof(void *)).
Added WEED_VOIDPTR_SIZE.
Added typedefs weed_error_t, weed_size_t, weed_voidptr_t.
Added typedefs weed_realloc_f, weed_calloc_f, weed_memmove_f.
weed_size_t is now int32_t rather than size_t.
Calling weed_leaf_get() for an existing leaf but with and invalid idx returns WEED_ERROR_NOSUCH_ELEMENT rather than
WEED_ERROR_NOSUCH_LEAF (BUGFIX).
Added WEED_ABI_VERSION (synonym for WEED_API_VERSION).
Added WEED_ERROR_IMMUTABLE and WEED_ERROR_UNDELETABLE.
Added WEED_FLAG_UNDELETABLE and WEED_FLAG_IMMUTABLE.


Filter API:
Added WEED_FILTER_API_VERISON, defined as 200 for this release.
Added WEED_ERROR_BADVERSION.
Added optional "flags" leaf to HOST_INFO.
Added WEED_GAMMA_UNKNOWN, WEED_GAMMA_LINEAR, WEED_GAMMA_SRGB (weed-palettes.h)
Added WEED_HOST_SUPPORTS_LINEAR_GAMMA flag bit for HOST_INFO "flags".
Added WEED_FILTER_HINT_LINEAR_GAMMA for FILTER_CLASS "flags"
Added definitions for WEED_GAMMA_UNKNOWN, WEED_GAMMA_LINEAR, WEED_GAMMA_SRGB.
Added optional "gamma_type" leaves to PARAMETER_TEMPLATE, PARAMETER, CHANNEL.
Moved typedef weed_timecode_t from weed.h
Removed WEED_LEAF_READONLY_PLUGIN, WEED_LEAF_READONLY_HOST and WEED_ERROR_LEAF_READONLY.



(C) Gabriel "Salsaman" Finch 2005 - 2019

With contributions by: Niels Elburg, Dennis "Jaromil" Rojo, Andraz
Tori, and Oyvind "Pippin" Kolas.

Weed is an object system developed for video/audio processing. Weed
currently has modules for video/audio effects (weed-effects), and for
timeline style events (weed-events).




== WEED_API_VERSION / WEED_ABI_VERSION ==

These equivalent preprocessor symbols are defined as 200 for this version of the specification. This
number may be increased for future revisions of the spec.

Note:
libweed-utils provides the following function:

  int check_weed_abi_compat(int32_t higher, int32_t lower)

which returns WEED_TRUE if the two versions are compatible, WEED_FALSE otherwise.
(or if either version is higher that the library version, since it can't know the future...)



=== General overview ===

Weed can be utilsed at different levels depending on the needs of the programmer.

Level 0: -a program would simply #include weed.h and may set the symbols #HAVE_WEED_PLANT, #HAVE_WEED_LEAF and #HAVE_WEED_DATA
At this level there is no definition of these items, however the core function types (listed below) are defined.
The fundament types are defined along with some error numbers and so on.



Level 1: an application #includes weed.h and uses the built-in type definitions weed_data_t, weed_leaf_T, weed_plant_t.
The application may now use the a reference implementation of libweed for all of the core functions. An application wishing to use
libweed just needs to call weed_init(int32_t api_level) to get the correct version of the functions for that api version.
In most cases you would just call weed_init(WEED_API_VERSION) and check that the returned value is not WEED_ERROR_BADVERSION.



Level 2: at this level we distinguish between plugins and hosts. The host program is normally the one which will dlopen()
or link with the plugins.

Hosts should #incldue weed-host.h before weed.h, amd plugins should instead #include weed-plugin.h

The main difference is that the plugin gets staticly scoped versions of the core functions,
whereas the host gets global ones.

Plugins also lose access to the weed_leaf_set_flags() function.



Level 3: at his level host and plugin may choose to use a utilities library such as weed-utils.
Only hosts should link with this library. Plugins simply need to include the weed-utils.h header.


There also a library (in development) which effects plugins may use, weed-plugin-utils.c



Level 4: host and pugins would be tailored to a particular role (multiple roles may be selected provide their symbols do not
conflict.)
For example for video plugins, host and plugins would #include weed-effects.h


Depending on the apllication type there may be other optional or mandatory headers.
For example, for video effects plugins, Weed offers the optional headers weed-palettes.h amd weed-compat.h

For weed events there is weed-events.h











== WEED PLANTS ==

A ''plant'' in Weed is a collection of one or more ''leaves''.

Each plant has one MANDATORY leaf, with the key WEED_LEAF_TYPE (defined as "" in weed.h).
Depending upon the value of this leaf, the plant may have other mandatory and optional leaves defined by an 
application specification.

"type" is a single valued leaf with seed_type WEED_SEED_INT (See below: seed_types).

The "type" is passed as a parameter in the weed_plant_new() function.
This function returns a pointer to newly allocated plant with the "type" leaf value set
to the plant_type.




== LEAVES ==

As mentioned above, each "plant" is simply a set of one or more "leaves".

Each leaf has at least:
 * a ''key'' a unique (for the plant) non-NULL ASCII string; cannot be changed after the leaf is created.
 * a ''value'' (an array of 0 or more elements, the type depends on the seed_type of the leaf)
 * ''number of elements'' (weed_size_t) contained in the value field.
 * a ''seed_type'' (int32_t). Defines the type of the value field. Cannot be altered after the leaf is created.
 * a bitmap ''flags'' field (int32_t)





== SEED TYPES ==

The "seed type" denotes the type of the value field in a leaf.
Weed offers the following '''fundamental''' types:[[BR]]

 * WEED_SEED_INT     : equivalent to a signed /unsigned 32 bit integer
 * WEED_SEED_DOUBLE  : equivalent to a 64 bit signed double
 * WEED_SEED_BOOLEAN : signed /unsigned 32 bit integer, acceptable values are WEED_FALSE or WEED_TRUE 
 * WEED_SEED_STRING  : NUL terminated array of char (max length is uint32_max). (char *)NULL is treated as a zero length string.
 * WEED_SEED_INT64   : signed /unsigned 64 bit integer


'''Pointer''' types (number >= 64)
Pointers may be of any size, however they will be stored as 64 bit. It is up to the application to handle any problems caused.

 * WEED_SEED_VOIDPTR     : corresponds to a 32 or 64 bit C void * type. Will be stored internally as uint64_t


 * WEED_SEED_PLANTPTR    : a pointer / reference to another weed plant.
   			   

Types >= 65536 are reserved for custom use. Custom seeds MUST be pointer seeds, however only WEED_SEED_VOIDPTR
may be auto-freed on deletion (see below).


== COMPILING WITH WEED ==

In order to use the reference build of Weed, a program should #include

weed/weed.h

and link with libweed. More advanced uses of Weed (e.g for effects plugins or events require further headers, see below for
an example).



== Weed library functions  ==


== Weed_init() ==

   Prior to calling any other weed functions, a program (but not a plugin) must call:

 * weed_error_t weed_init(int32_t api_version)

     The application passes in the API version it wants to use. The function will set function
     pointers to the correct API versions of the core functions. Usually the program would use WEED_API_VERSION defined in
     weed.h

     If the host selects an API version < 100 or > the highest version the library supports, WEED_ERROR_BADVERSION will
     be returned, otherwise WEED_SUCCESS is returned.




== GETTING/SETTING LEAF VALUES ==

For WEED_SEED_STRING, Weed will allocate a new string when getting / setting the value. For all other seed_types,
copy is by reference.



== WEED CORE FUNCTIONS ==

 * weed_plant_t *weed_plant_new (int32_t plant_type) : allocates and returns a new Weed plant
   with a single leaf, "type" with a single elemnt of WEED_SEED_INT, value set to plant_type.
   In case of memory error, the plant will not be created and NULL shall be returned.





 * weed_error_t weed_leaf_set (weed_plant_t *plant, const char *key, int32_t seed_type, weed_size_t num_elems, weed_voidptr_t values)

    Set leaf values and number of elements.

    If plant is NULL, the function shall return WEED_ERROR_NOSUCH_LEAF.
    If key is NULL or zero length, it is equivalent to setting the "type" leaf.

    IF seed_type is not a pointer type (>= 64) and not one of the fundamental types, then WEED_ERROR_WRONG_SEED_TYPE is returned and
    the leaf is not created or altered.

    If the leaf already exists and has a different seed_type then WEED_ERROR_WRONG_SEED_TYPE will be returned and the value
    will not be updated.
    
    Values should be A pointer to an array of the appropriate type and array size, cast to a weed_voidptr_t

    E.g for WEED_SEED_INT, values should be (weed_voidptr_t)(int32_t[num_elems]) or (weed_voidptr_t)(unt32_t[num_elems]),

for WEED_SEED_STRING, it should be (weed_voidptr_t)(char *[num_elems]),

for WEED_SEED_VOIDPTR, (weed_voidptr_t)(weed_voidptr_t[num_elems])
    etc.

    The values array is assumed to be of the correct size and type.

    If the leaf does not exist in the plant, then it will be created and added to the plant, otherwise the value and array size
    of the existing leaf will be amended.


    If num_elems is 0 then only the seed_type is set (or checked if the leaf already exists),
    and while in this state.
    any attempts to retrieve the value with weed_leaf_get() shall return WEED_LEAF_NOSUCH_ELEMENT. However this is useful if
    you want to fix the seed_type of a leaf without setting any particular value.

    Passing a NULL pointer for values and num_elems > 0 will likely lead to undesired behaviour.

    In case of a memory error, WEED_ERROR_MEMORY_ALLOCATION is returned, and either the leaf is not created,
    or its num_elems is set to zero and its value to NULL.


    (as of API 200) If the WEED_FLAG_IMMUTABLE flag bit is set for the leaf, then WEED_ERROR_IMMUTABLE
    is returned and the leaf is not altered.

    Note:
    Attempting to set the number of elements of the "type" leaf to a value other than 1 will result in WEED_ERROR_NOSUCH_ELEMENT
    being returned and the value will not be altered.





* weed_error_t weed_leaf_get (weed_plant_t *plant, const char *key, int32_t idx, weed_voidptr_t value) :

    returns the nth (starting from 0) element of the specified leaf.

    value should be typecast to a weed_voidptr_t from a pointer of the appropriate type (depending on the seed_type of the leaf.)
    E.g for WEED_SEED_INT it should be int32_t * or uint32_t *. For WEED_SEED_STRING, a char **,
    for WEED_SEED_VOIDPTR a weed_voidptr_t *. etc.

    If if the leaf does not exist, or plant is NULL, WEED_ERROR_NOSUCH_LEAF is returned.
    If key is NULL or zero length, it is equivalent to getting the "type" leaf.

    If the leaf exists but the element does not exist, then WEED_ERROR_NOSUCH_ELEMENT is returned.
    Note: prior to API version 200, this would erroneously return WEED_ERROR_NOSUCH_LEAF. If this behaviour is
    still required, then set the api version < 200 in weed_init(). 

    the value of the leaf element will be copied to value (IF value is non-NULL), and WEED_SUCCESS will be returned.

    Note:
    For WEED_SEED_STRING, it may be necessary to first call weed_leaf_element size()
    and allocate a char array of at least the returned value + 1 (to hold the terminating NUL) in which to receive the value.


    (For this reason it may be easier to use a utilities library such as libweed-utils which will perform this process in a more
    convenient fashion.)
    

    It is not a programming error to pass in a NULL pointer for value. In this case, Weed will not attemt to copy the value, but will
    still return an error code: either WEED_SUCCESS, WEED_ERROR_NOSUCH_LEAF or WEED_ERROR_NOSUCH_ELEMENT.

    In this way, it is possible to check if a leaf exists in the plant or not, by calling weed_leaf_get(plant, key, 0, NULL);
    - if the leaf doesn't exist, then WEED_ERROR_NOSUCH_LEAF will be returned
    - if the value of the leaf is NULL, then number of elements should be 0, and WEED_ERROR_NOSUCH_ELEMENT will be returned
    - if the value of the leaf has 1 or more elements, then WEED_SUCCESS will be returned.






* weed_error_t weed_leaf_delete (weed_plant_t *plant, const char *key)
   remove the specified leaf from the plant, and free it

   [prior to API 200, this function was not avaiable to plugins]

   if the plant is NULL or the leaf does not exist, WEED_ERROR_NOSUCH_LEAF is returned.
   If key is NULL or zero length, it is considered equivalent to trying to delete the "type" leaf.

   if the WEED_FLAG_UNDELETABLE flag bit is set then WEED_ERROR_UNDELETABLE is returned, and the leaf is not deleted.

   For leaves with seed type WEED_SEED_STRING, the data is freed for each non NULL element.

   For leaves with type WEED_SEED_VOIDPTR, the data of any elements with non-zero size (meaning the value was last set with
   weed_leaf_set_voidptr_sizes()), is freed - unless the WEED_FLAG_IMMUTABLE bit is set in the leaf flags.

   The "type" leaf of a plant may only ever be deleted via weed_plant_free(). If you attempt to delete it with weed_leaf_delete()
   then either WEED_ERROR_UNDELETABLE will be returned (if the WEED_FLAG_UNDELETABLE bit is set), otherwise WEED_ERROR_NOSUCH_LEAF
   will be returned. (Note the normal order of precedence of errors is reversed in this case, WEED_ERROR_NOSUCH_LEAF would normally
   be returned BEFORE WEED_ERROR_UNDELETABLE).

   Note that the flag bit WEED_FLAG_IMMUTABLE is ignored in this function.




* weed_size_t weed_leaf_num_elements (weed_plant_t *plant, const char *key)
   - returns the number of elements for the specified leaf.

   if the leaf does not exist or the plant is NULL, returns 0. Since it is possible to create leaves with 0 elements,
   this is not a good method to use to check whether a leaf exists or not. If you want to do this you should use weed_leaf_get()
   with value set to NULL as described above, or weed_leaf_get_seed_type (as described below).

   If key is NULL or zero length, it is considered equivalent to trying to the "type" leaf.




 * weed_size_t weed_leaf_element_size (weed_plant_t *plant, const char *key, int32_t idx)

   If the  plant is NULL, the leaf does not exist or idx is out of range, (weed_size_t)0 will be returned.

   If key is NULL or zero length, it is considered equivalent to the "type" leaf.

   For WEED_SEED_STRING, returns the string length in bytes (without any terminating NUL); equivalent to strlen().

   [T.B.D
   For WEED_SEED_VOIDPTR, if the value was last set via the weed_leaf_set_sizes() function, returns the size set.
   Otherwise, returns 0.]

   NOTE: the meaning of this changed as of API 200. Prior to this, for WEED_SEED_VOIDPTR it would return sizeof(void *).
   weed.h now defines WEED_VOIDPTR_SIZE so 
   it may be advisable to enclose code in #ifdef WEED_VOIDPTR_SIZE if dealing with older versions of the API.
   if the old behavior is required, then weed_init() can be called with an API version < 200 (e.g. 199).

   For all other seed types, returns sizeof(seed_type), (e.g. for WEED_SEED_INT, returns 4, for WEED_SEED_INt64, returns 8).
   




 * int32_t weed_leaf_seed_type(weed_plant_t *plant, const char *key) : get the seed_type for a leaf

   Returns the seed_type for a leaf. If the plant is NULL or the leaf does not exist, will return WEED_SEED_INVALID.
   If key is NULL or zero length, it is considered equivalent to the "type" leaf.

   This can be used to check whether a leaf exists or not (provided plant is non-NULL). If you want to differentiate
   between leaves that have values or not, use the weed_leaf_get() method described above.






 * int32_t weed_leaf_get_flags(weed_plant_t *plant, const char *key) : get the flags for a leaf
   No checking is done to ensure that plant is not NULL or that the leaf exists, this is left to the caller.
   In this case (int32_t)0 will be returned.

   Otherwise the value of the leaf flags is returned.

   If key is NULL or zero length, it is considered equivalent to the "type" leaf.





 * weed_error_t weed_plant_free (weed_plant_t *plant) :

   returns error WEED_ERROR_UNDELETABLE if the "type" flag has WEED_LEAF_UNDELETABLE set, and nothing will be freed.

   If the plant is NULL then WEED_SUCCESS is returned.

   otherwise, any leaves which do NOT have the WEED_FLAG_UNDELETABLE bit set will be freed in a similar fashion to weed_leaf_delete()

   if all of the leaves except the "type" leaf were deleted, the "type" leaf will be deleted and the plant is freed.
   Im this case WEED_SUCCESS is returned.
   
   If leaves other than the type leaf remain (because they were undeletable), the "type" leaf is not freed, and
   WEED_ERROR_UNDELETABLE is returned. In this case it will be necesssary to clear the WEED_FLAG_UNDELETABLE
   flag bit from the remaining leaves (e.g with weed_plant_list_leaves() and weed_leaf_set_flags()),
   before calling weed_plant_Free() a second time.

   To recap: if none of the leaves have the WEED_FLAG_UNDELETABLE flag bit set, the plant will be freed and WEED_SUCCESS returned.
   If any of the leaves other than they "type" leaf have the flag bit set, neither they nor the "type" leaf will nbe deleted and
   WEED_ERROR_UNDELETABLE is returned.
   If the "Type" leaf has the WEED_FLAG_UNDELETABLE bit set, no leaves will be deleted, and WEED_ERROR_UNDELETABLE is returned.

   Note that as with weed_leaf_delete(), the flag bit WEED_FLAG_IMMUTABLE is ignoredin this function.






 * char **weed_plant_list_leaves (weed_plant_t *plant)
   returns a (char *)NULL terminated char * array of leaf keys.

   In case of memory error, NULL is returned and the array is not created. The caller should free any non-NULL elements
   when no longer required.

   If plant is NULL, returns an array with just the (char *)NULL final element.





A Weed host has access to an additional function which is not available to plugins:

 * weed_error_t weed_leaf_set_flags(weed_plant_t *plant, const char *key, int32_t flags)

   If key is NULL or zero length, it is considered equivalent to the "type" leaf.

   Caution ! Clearing the WEED_FLAG_IMMUTABLE bit for the "type" leaf allows the plant type to be changed !

   Setting the WEED_FLAG_UNDELETABLE bit for the "type" leaf prevents the plant and ANY leaves from being freed
   using weed_plant_free().

   Setting the WEED_FLAG_UNDELETABLE bit for any other leaf prevents the plant and that leaf from being freed
   using weed_plant_free().

   Setting the WEED_FLAG_UNDELETABLE bit for any leaf also prevents the leaf from being deleted
   using weed_leaf_delete().

   Will return WEED_ERROR_NOSUCH_LEAF if the plant is NULL or leaf does not exist.



(T.B.D) Setting the WEED_FLAG_IMMUTABLE  bit for leaves of type WEED_SEED_VOIDPTR prevents the data from being freed when the leaf
   is deleted.




As of API 200: (TODO):

 * weed_error_t weed_leaf_set_voidptr_sizes (weed_plant_t *plant, const char *key, weed_size_t num_elems,
 weed_voidptr_t values, weed_size_t *sizes)

 Only valid for leaves with a seed type WEED_SEED_VOIDPTR. Will amend or create the leaf with
 (weed_voidptr_t)weed_voidptr_t[num_elems], Otherwis will return WEED_ERROR_WRONG_SEED_TYPE.

 and set the data sizes for the array. When the leaf is freed (with weed_plant_free or weed_leaf_delete) any non-NULL values
 will be automaticaly freed UNLESS the WEED_FLAG_IMMUTABLE flag bit is set.

 If the leaf is later amended with weed_leaf_set(), the sizes will be reset to 0.

    No checking is performed to see if plant is NULL or a valid plant, this is left to the caller. The arrays are assumed to be of
    the correct size and type.

    If num_elems is 0 then only the seed_type is set, and the leaf value is set to NULL.

    Passing a NULL pointer for values or sizes and num_elems > 0 will likely lead to undesired behaviour.

    In case of a memory error, WEED_ERROR_MEMORY_ALLOCATION is returned, and either the leaf is not created,
    or its num_elems is set to zero and its value to NULL.

    If the WEED_FLAG_IMMUTABLE flag bit is set for the leaf, then WEED_ERROR_IMMUTABLE
    is returned and the leaf is not altered.




 * weed_error_t weed_leaf_get_all (weed_plant_t *plant, const char *key, int32_t *seed_type, weed_size_t *num_elems, weed_voidptr_t values, weed_size_t **sizes, int32_t *flags)

 Retrieves the num_elements, values, sizes and flags for the specified leaf.
 "values" should be cast to an array of the appropriate type and also freed after use, along with
 any string values retrieved. Any of the fields may be NULL (except for plant).
 Will return WEED_SUCCESS, WEED_ERROR_NOSUCH_LEAF or WEED_ERROR_MEMORY_ALLOCATION.

 If key is NULL, then values will be a NULL terminated array of the leaves (similar to weed_plant_list_leaves()),
 seed_type will be set to the plant type; num_elems to the length of the values array (minus the final NULL); sizes will hold
 the number of elements in each leaf, and flags will be set to the flags for the "type" leaf. All returned arrays should be freed
 after use, plus all the (string) values (except the final NULL).

 Will return WEED_SUCCESS or WEED_ERROR_MEMORY_ALLOCATION.







== LEAF FLAGS ==

Two special flag bits are defined in weed.h:

WEED_FLAG_UNDELETABLE [1 << 0] :: the leaf cannot be deleted, weed_leaf_delete will return WEED_ERROR_UNDELETABLE if you try it

and

WEED_FLAG_IMMUTABLE [1 << 1] :: the leaf value cannot be changed (but it may be deleted),
                                   weed_leaf_set returns WEED_ERROR_IMMUTABLE if you try to do so


When creating a new plant, libweed automatically will set the WEED_LEAF_IMMUTABLE flag for the "type" leaf.
Thus if you want to change the plant type, you must first clear the WEED_LEAF_IMMUTABLE flag bit, e.g.

int32_t flags = weed_leaf_get_flags(plant, WEED_LEAF_TYPE);
weed_error_t error = weed_leaf_set_flags(plant, WEED_LEAF_TYPE, flags ^ (flags & WEED_FLAG_IMMUTABLE));
if (error == WEED_SUCCESS) {
...
// now you can change the "type" of the plant




If the "type" leaf is set undeletable, then the plant cannot be freed using weed_plant_free(),
the function will return WEED_ERROR_UNDELETABLE. In this case you need to clear the flag bit prior to calling weed_plant_free().

The combination of immutable and undeletable flag bits is designed so that Weed hosts can prevent plugins from
changing readonly values or freeing plants which are still referenced by the host.


Flag bits 0 - 15 are reserved for use by the Weed library. The remaining flag bits may be freely used by applications.




== WEED CORE ERRORS ==
Defined in weed.h

Errors are listed here in order of precedence from highest to lowest.

 *  WEED_SUCCESS[[BR]]
 *  WEED_NO_ERROR[[BR]]
    returned if no errors occured.

 *  WEED_ERROR_NOSUCH_LEAF[[BR]]
    leaf does not exist for the specified plant; returned from
    weed_leaf_get(), weed_leaf_delete(), weed_leaf_set_flags().

 *  WEED_ERROR_NOSUCH_ELEMENT[[BR]]
    plugin/host tried to read value of an invalid element number in a leaf; returned from weed_leaf_get()

 *  WEED_ERROR_WRONG_SEED_TYPE[[BR]]
    once the seed_type of a leaf is set, you cannot change
    it. weed_leaf_set_*() will return this error if
    you attempt such a thing, and the value of the leaf will not be amended.

 *  WEED_ERROR_IMMUTABLE[[BR]]
    returned if you try to alter the value of a leaf which has the WEED_FLAG_IMMUTABLE bit set

 *  WEED_ERROR_UNDELETABLE[[BR]]
    returned if you try to delete a leaf which has the WEED_FLAG_UNDELETABLE bit set

*   WEED_ERROR_BADVERSION [[BR]]
    returned from weed_init() if the host specifies an api version that the library cannot support.

 *  WEED_ERROR_MEMORY_ALLOCATION[[BR]]
    memory allocation has failed




== Plant types ==

weed.h defines a single plant type, WEED_PLANT_UNKNOWN, with value (int32_t)0.
Other Weed libraries provide additional plant types.




==== Other symbols ====

WEED_TRUE is #defined as 1 in the header.

WEED_FALSE is #defined as 0 in the header.

WEED_API_VERSION is #defined as 200 in the header.

WEED_API_VERSION_200 is also #defined in the header.

WEED_ABI_VERSION is #defined as 200 in the header.

WEED_ABI_VERSION_200 is also #defined in the header.

WEED_VOIDPTR_SIZE is #defined as (sizeof(void *))

weed_voidptr_t is typedefed to (uint64_t *)
weed_size_t is typedefed to (uint32_t)
weed_error_t is typedefed to (int32_t)




== Leaf keys ==
weed.h defines the following leaf keys:


WEED_LEAF_TYPE "type"
Mandatory leaf for all plants

WEED_LEAF_WEED_API_VERSION "weed_api_version"
WEED_LEAF_WEED_ABI_VERSION "weed_api_version"
Provided for convenience for use by any plant type



== Pre-processor symbols ==
The Weed header checks for the following pre-processor symbols:

==== HAVE_WEED_PLANT_T ====

The reference implementation provides default
implementations of a Weed plant. This can be overriden at compile time using:
{{{
#define HAVE_WEED_PLANT_T
}}}
before
{{{
#include <weed/weed.h>
}}}

This need only be done in the host.
In this way a host can provide its own defintion of a Weed plant, and
provide its own implementation of the core functions, whilst still making
use of the rest of the header file.

HAVE_WEED_LEAF_T and HAVE_WEED_DATA_T allow for finer levels of overloading.




== Weed Plugin and Weed Host ===








== WEED EFFECTS EXAMPLE ==

Since the main purpose of Weed is for video effects, a description is
included here, as an example of how Weed can be used.

There is also a Weed Audio Extension, and a Weed Events Extension,
which are documented separately.


== WEED_FILTER_API_VERSION  ==

This preprocessor symbol is defined as 200 for this version of the specification. This
number may be increased for future revisions of the spec.

libweed-utils provides the following function:

  int check_filter_api_compat(int32_t higher, int32_t lower)

which returns WEED_TRUE if the two versions are compatible, WEED_FALSE otherwise.




Weed Effects (and Event) plugins, the value of the plant leaf "type" MAY be one of:

  * WEED_PLANT_HOST_INFO          : Information about host and core functions
  * WEED_PLANT_PLUGIN_INFO        : Information about plugin and list of filter classes it includes
  * WEED_PLANT_FILTER_CLASS       : Descriptive information about single filter class
  * WEED_PLANT_CHANNEL_TEMPLATE   : Information about what kinds of channels filter accepts
  * WEED_PLANT_PARAMETER_TEMPLATE : Information about what kinds of parameters filter has
  * WEED_PLANT_FILTER_INSTANCE    : All data about an instance
  * WEED_PLANT_CHANNEL            : Instantiation of a channel
  * WEED_PLANT_PARAMETER          : Instantiation of a parameter

  * WEED_PLANT_GUI                : Used for GUI hints for the
                                    filter_classes and parameter_templates.



  * WEED_PLANT_EVENT              : plant used for events (described
                                            in the Weed EVENTS extension
  * WEED_PLANT_EVENT_LIST         : plant used for event lists (described
                                            in the Weed EVENTS extension





== WEED UTILITY FUNCTIONS ==

To make life easier for host and plugin writers, there exists a Weed
utility library, which wraps some of the core functions in simpler
variants. This is documented in the Weed Utility Library spec. (TODO).

== COMPILING A PLUGIN HOST WITH WEED ==

A host (ie. the application which will dlopen() the plugins)
wishing to use the reference build of Weed should #include the following headers:

weed/weed-host.h // BEFORE weed.h
weed/weed.h

and link with libweed

If the host wishes to use the Weed effects system:

weed/weed-effects.h

If using video effects:
weed/weed-palettes.h // before or after any other headers

If the host makes use of the Weed Utility Library, it may also be 
linked (shared or static) with libweed-utils, and #include weed/weed-utils.h

If the host wishes to use Weed events, it should #include weed/weed-events.h

weed-compat.h is provided for compatibily with some external libraries (see below).



== COMPILING A PLUGIN WITH WEED ==

An effects plugin wishing to use the reference build of Weed should #include the following headers:

weed/weed-plugin.h // BEFORE weed.h
weed/weed.h
weed/weed-effects.h // AFTER weed.h

and for a video effect:
weed/weed-palettes.h // before or after any other headers

TODO:
If plugins wish to use weed-utils then they should #include weed/weed-utils AFTER weed-plugin.h.

Plugins may optionally be link with libweed-plugin (TODO) and if they wish to use Weed utils they should simply
#include weed/weed-utils.h

Plugins should NOT be linked directly with libweed or libweed-utils, as they would be using the host version of the core
functions.



== WEED-COMPAT.H ==
weed/weed-compat.h is an optional include, provided for compatibility with some external libraries.
It will automatically include weed/weed-palettes.h if necessary

It will #define WEED_COMPAT_VERSION

If you #define NEED_FOURCC_COMPAT before calling it, then it will provides the following function:

int fourccp_to_weedp(unsigned int fourcc, int bpp, int *interlaced, int *sampling, int *sspace, int *clamping)
which will attempt to return a weed palette from an input fourcc code and bpp
- bpp is the pixel size in bits, currentl only 24 and 32 are recognised (e.g 24 for RGB, 32 for RGBA)

interlaced will be set to 1 if the palette is interlaced, otherwise 0
sampling will return the YUV sampling (or WEED_YUV_SAMPLING_DEFAULT if it could not be ascertained)
sspace will return the YUV subspace e.g. WEED_YUV_SUBSPACE_YCBCR, WEED_YUV_SUBSPACE_BT709
clamping will return the YUV clamping type, WEED_YUV_CLAMPING_CLAMPED or WEED_YUV_CLAMPING_UNCLAMPED

as of WEED_COMPAT_VERSION 0.11.0 it will also #define WEED_FOURCC_COMPAT in this case.



The header also provides compatibility with other libraries, eg. libav. Check the header for details.



== WEED_API_VERSION / WEED_ABI_VERSION ==

This is defined as 200 for this version of the specification. This
number will be increased for future revisions of the spec. if a
function or a symbol is changed or added.



== NOTE ABOUT COLOUR SPACES ==
N.B. if you don't understand this section, you can safely ignore it.

As of API version 200, Weed effect plugins may choose to operate in the LINEAR (i.e. perceptual) colour space. This means that
for RGB type palettes, the component values (R, G, B) represent the values which are displayed on the monitor.

For example, since the human eye perceives darker values more strongly than lighter values, a mid-grey in this colour space has
an (R, G, B) value of (55, 55, 55). This colour space is used since it is much better for calculating visual brightness (luma)
values, and for mixing (adding) and multiplying colour values perceptually. Thus all colour "pixel_data" values for RGB(A) will
be supplied by the host or generated by the plugin using this colour space ('transfer function' to be more precise).

In addition to the "pixel_data" values, the R, G, B VALUEs of any WEED_HINT_COLOR type parameters will be converted to this
colour space by the host. So for example if the user entered (127, 127, 127) for a colour value in the GUI, then the plugin would
receive the values (55, 55, 55). When creating the parameter templates, the DEFAULT and NEW_DEFAULT values should also be
in linear gamma. (For float types, the equivalent is 0.5 and 0.181818...).

If the host supports this, it will set the WEED_HOST_SUPPORTS_LINEAR_GAMMA bit in the HOST_INFO "flags"
It will then set the "gamma_type" leaves for RGB CHANNEL instances and colour PARAMETER instances to WEED_GAMMA_LINEAR.

The plugin can request this behaviour be overridden for individual parameters (in or out) by setting the
PARAMETER_TEMPLATE's "gamma_type" leaf to WEED_GAMMA_SRGB.
The host should then leave the VALUEs in the sRGB space and set "gamma_type" to WEED_GAMMA_SRGB for the PARAMETER instance.
Note this applies only to paramters, individual channels cannot be overridden.


If a plugin desires this behaviour it can set the flag bit WEED_FILTER_HINT_LINEAR_GAMMA in the FILTER_CLASS.

This mode may be much better for plugins that want to mix / overlay channels or colour values, or use perceptual brightness values
without reference to absolute colour. 



== PLANT TYPES ==

There now follows a description of the various plant types for weed effects, 
and their mandatory and optional leaves.



== PLANT TYPE HOST_INFO ==

 * "type" == WEED_PLANT_HOST_INFO

'''Mandatory leaves''':[[BR]]

WEED_LEAF_GET_FUNC "weed_leaf_get_func"  :: WEED_SEED_VOIDPTR - pointer to function of type weed_leaf_get_f for the plugin to use
WEED_LEAF_SET_FUNC "weed_leaf_set_func"       :: etc...
WEED_LEAF_DELETE_FUNC "weed_leaf_delete_func"       :: etc...
WEED_PLANT_NEW_FUNC "weed_plant_new_func"
WEED_PLANT_FREE_FUNC "weed_plant_free_func"
WEED_PLANT_LIST_LEAVES_FUNC "weed_plant_list_leaves_func"
WEED_LEAF_NUM_ELEMENTS_FUNC "weed_leaf_num_elements_func"
WEED_LEAF_ELEMENT_SIZE_FUNC "weed_leaf_element_size_func"
WEED_LEAF_SEED_TYPE_FUNC "weed_leaf_seed_type_func"
WEED_LEAF_GET_FLAGS_FUNC "weed_leaf_get_flags_func"

WEED_LEAF_MALLOC_FUNC "weed_malloc_func"
WEED_LEAF_FREE_FUNC "weed_free_func"
WEED_LEAF_MEMSET_FUNC "weed_memset_func"
WEED_LEAF_MEMCPY_FUNC "weed_memcpy_func"

Addded in API version 200:
WEED_LEAF_CALLOC_FUNC "weed_calloc_func"
WEED_LEAF_REALLOC_FUNC "weed_realloc_func"
WEED_LEAF_MEMMOVE_FUNC "weed_memmove_func"



'''Optional leaves''': [[BR]]

 * "weed_api_version" : WEED_SEED_INT : weed api version exposed in host,
 * "filter_api_version" : WEED_SEED_INT : filter api version provided by host
 * "plugin_info" : WEED_SEED_PLANTPTR : a pointer to the most recent PLUGIN_INFO created from this template

 * "host_name"    : WEED_SEED_STRING : host name
 * "host_version" : WEED_SEED_STRING : host version
 * "flags"        : WEED_SEED_INT : bitmap of host_info flags (see below)



== PLANT TYPE PLUGIN_INFO ==

The plugin_info plant is returned from the plugin setup function weed_setup(), to tell the host what
filter classes are available in that plugin. After receiving this plant, the host nay
set all leaves in it IMMUTABLE  and should not change any leaf values itself.

 * "type" == WEED_PLANT_PLUGIN_INFO

'''Mandatory leaves''':[[BR]]

 * "filters"	  : WEED_SEED_PLANTPTR : array of pointers to the filters in the plugin
 * "version"	  : WEED_SEED_INT : plugin package version


'''Optional leaves''':[[BR]]

 * "host_info"	  : WEED_SEED_PLANTPTR : pointer to the HOST_INFO
   plant returned from the host in weed_bootstrap()

 * "package_name" : WEED_SEED_STRING : for wrapper filters, the name of the package which is wrapped, e.g. "frei0r"
 * "maintainer"	  : WEED_SEED_STRING : maintainer of plugin package
 * "url"	  : WEED_SEED_STRING : URL of plugin package

 * "min_weed_api_version"      : WEED_SEED_INT        :: min versions of the Weed API that the plugin supports
 * "max_weed_api_version"      : WEED_SEED_INT
 * "min_weed_filter_version"   : WEED_SEED_INT
 * "max_weed_filter_version"   " WEED_SEED_INT





== PLANT TYPE FILTER_CLASS ==

Plant type filter_class is used to describe all properties of a single
filter in a plugin. It is created by the plugin in weed_setup() and
then added to the plugin_info plant. All leaves in this plant should be set READONLY for
the plugin after weed_setup(), and should not be altered by the host.

"type" == WEED_PLANT_FILTER_CLASS

'''Mandatory leaves''':[[BR]]

 * "name"         : WEED_SEED_STRING : the filter name; MUST be unique in the plugin, 
 * "author"       : WEED_SEED_STRING : the filter author(s) - DO NOT change this unless a new "version" of the plugin is made - instead add to the 
                      "extra_authors" leaf (see below)
 * "version"      : WEED_SEED_INT : filter version. Adding more parameters does not require a version update. However, removing parameters, changing 
   		    their order or type, adding or removing channel templates does require an update. Prior versions of the filter MUST be left in 
		    plugin, as hosts may be using them.
 * "process_func" : WEED_SEED_VOIDPTR : pointer to the process_func()
 * "plugin_info"  : WEED_SEED_PLANTPTR : pointer to the PLUGIN_INFO plant containing this FILTER_CLASS

'''Optional leaves''': [[BR]]

 * "flags"        : WEED_SEED_INT : bitmap of filter flags (see below)
 * "init_func"    : WEED_SEED_VOIDPTR : pointer to the init_func()
                    (can also be NULL)
 * "deinit_func"  : WEED_SEED_VOIDPTR : pointer to a the deinit_func()
                    (can also be NULL)
 * "in_channel_templates"    : WEED_SEED_PLANTPTR, list of 0 or more elements: array of inp channel templates, '''type''' of the referenced plant MUST be  WEED_PLANT_CHANNEL_TEMPLATE
 * "out_channel_templates"   : WEED_SEED_PLANTPTR, list of 0 or more elements : array of out channel templates, '''type''' of the referenced plant MUST be  WEED_PLANT_CHANNEL_TEMPLATE
 * "in_parameter_templates"  : WEED_SEED_PLANTPTR, list of 0 or more elements : array of in parameter templates, '''type''' of the referenced plant MUST be  WEED_PLANT_PARAMETER_TEMPLATE
 * "out_parameter_templates" : WEED_SEED_PLANTPTR, list of 0 or more elements : array of out parameter templates, '''type''' of the referenced plant MUST be  WEED_PLANT_PARAMETER_TEMPLATE.

 * "extra_authors": WEED_SEED_STRING : list of extra authors which can be altered without changing the plugin "version"
 * "description"  : WEED_SEED_STRING : filter description
 * "url"          : WEED_SEED_STRING : filter URL
 * "copyright"    : WEED_SEED_STRING : copyright details for filter
 * "license"      : WEED_SEED_STRING : license of filter
 * "target_fps"   : WEED_SEED_DOUBLE : plugin can inform the host of
                                       the target fps rate(s) for the
                                       host to run the plugin. 
				       Host should set "fps" for the
				       instance in this case.

 * "gui" : WEED_SEED_PLANTPTR : pointer to a plant
           type GUI [see below - GUI plants]. The host should not change this value, or any of the
           leaves inside it. The plugin may create it and set leaves
           it in weed_setup().

 * Every plugin can store internal data in leaves inside the
   filter_class  plant, and host MUST NOT change their values. Those internal leaves MUST have keys prefixed with "plugin_"



== PLANT TYPE FILTER_INSTANCE ==

Plant type filter_instance is created by the host, and used to hold all data that are related to
a single instance of the filter. Mandatory leaves MAY be set
IMMUTABLE by the host after weed_setup(), and should not be altered by the host. 
Optional leaves created by the host MAY be set IMMUTABLE.

The host examines a filter_class and prepares a filter_instance from
it. After this the host can pass the filter_instance into the filter's
init_func() [if the plugin has one] to prepare to use it.


"type" == WEED_PLANT_FILTER_INSTANCE

'''Mandatory leaves''':[[BR]]
 * "filter_class"   : WEED_SEED_PLANTPTR : Pointer to a filter_class plant
 that this filter instance is based on. MUST be one of the filters
 returned in the plugin's plugin_info plant.


The following are mandatory only if there are corresponding templates
in the filter class:

 * "in_channels"    : WEED_SEED_PLANTPTR, list of 0 or more elements : array of in channels, '''type''' of the referenced plants MUST be WEED_PLANT_CHANNEL
 * "out_channels"   : WEED_SEED_PLANTPTR, list of 0 or more elements : array of out channels , '''type''' of the referenced plants MUST be WEED_PLANT_CHANNEL
 * "in_parameters"  : WEED_SEED_PLANTPTR, list of 0 or more elements : array of in parameters, '''type''' of the referenced plants MUST be WEED_PLANT_PARAMETER
 * "out_parameters" : WEED_SEED_PLANTPTR, list of 0 or more elements : array of out parameters, '''type''' of the referenced plants MUST be WEED_PLANT_PARAMETER





The following is mandatory if the plugin sets "target_fps" for either
filter_class or filter_instance:

 * "fps" : WEED_SEED_DOUBLE : the current target fps of the host running the instance
   (i.e frequency at which it attempts to call process_func() ).

Other optional leaves:

 * "target_fps"   : WEED_SEED_DOUBLE : plugin can inform the host of
                                       the target fps rate(s) for the
                                       host to run the instance.
				       Host should set "fps" for the
                                       instance in this case. Host may
                                       optionally 
                                       set this READONLY_PLUGIN after
                                       the plugin has set it, or may
                                       ignore it.

 * "rowstride_alignment_hint" : WEED_SEED_INT : this is a *hint* to the host that the plugin prefers rowstrides aligned to a certain byte size. It 
  			       		     may be ignored by the host.		      


 * Every plugin can store internal data in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys
 prefixed with "plugin_". The plugin is responsible for weed_free()ing
 any memory buffers in the deinit_func.






== PLANT TYPE CHANNEL_TEMPLATE ==

Plant type channel template is used as a description of a single
channel (input or output) a filter can handle. All leaves SHOULD
be set READONLY for the plugin after weed_setup(), and should not
be altered by the host.

 * "type" == WEED_PLANT_CHANNEL_TEMPLATE

'''Mandatory leaves for all channels''': [[BR]]

 * "name" : WEED_SEED_STRING  : name of the channel, MUST be unique across all channels in the filter class

'''Mandatory leaves for channels with video''': [[BR]]

 * "palette_list" : WEED_SEED_INT   : the plugin sets this to an
 array of allowed palettes for the channel. Its order is plugin's
 preference for a palette. If this leaf is missing, the channel
 only supports audio.

'''Mandatory leaves for channels with audio''': [[BR]]

 See the weed AUDIO extension.

'''Optional leaves for all channel types''': [[BR]]

 * "flags" : WEED_SEED_INT : bitmap of channel_flags that plugin sets

 * "description"  : WEED_SEED_STRING : description of this channel

 * "optional"     : WEED_SEED_BOOLEAN : the plugin may set this to
                    WEED_TRUE for channels that can be left out at initialization time. If
                    the host decides not to use the channel, it must set "disabled" to
                    WEED_TRUE for the channel. The host must reinit
                    the instance if a channel is enabled or disabled after init_func().

 * "max_repeats" : WEED_SEED_INT : maximum number of channels that
      the host can create from this template. A value of 0 indicates
      any number (limitless). If not present, "max_repeats" is assumed to be 1.
      If the channel_template is marked "optional", then the minimum number of this
      channel_template is 0, otherwise it is 1.

      If "max_repeats" is present, the number of repeats may be changed
      [reduced] by the host after init() and between processing calls without the need to re-initialise the
      plugin. In all other cases, a change in the number of channels requires
      the plugin to be re-initialised. 
      The number of channels may only be altered [reduced] by setting
      "disabled" to WEED_TRUE for one or more channels created from
      this template. This is allowed even if the template is not marked "optional" - though in the latter case the number 
      of non-disabled repeats must always be at least 1.

 * Every filter can have its internal data stored in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys
 prefixed with "plugin_"


'''Optional leaves for channels with video''': [[BR]]

 * "width" : WEED_SEED_INT    : If set, frame width in pixels that a
   plugin can handle. If it is set, host is forbidden to set the width
   in channel instance to anything else. For YUV packed type palettes, the
   width is in macropixels (e.g for WEED_PALETTE_UYVY888, it is the
   width in UYVY macropixels). For planar YUV palettes, it is measured
   in the Y plane.

 * "height" : WEED_SEED_INT   : If set, frame height in pixels that a plugin can handle. If it is set, host is forbidden to set the height in channel instance to anything else 

 * "hstep" : WEED_SEED_INT : If set, the host must set the channel width to a multiple of this (in pixels). Should be avoided if possible for performance reasons.

 * "vstep" : WEED_SEED_INT : If set, the host must set the channel height to a multiple of this (in pixels). Should be avoided if possible for performance reasons.

 * "maxwidth" : WEED_SEED_INT : If set, the host must set the channel width <= maxwidth (in pixels)

 * "maxheight" : WEED_SEED_INT : If set, the host must set the channel height <= maxheight (in pixels)

 * "alignment" : WEED_SEED_INT : If set, each element in "pixel_data" will be aligned
                             to this many bytes boundary. Must be a
                             power of 2, and a multiple of
                             sizeof (void *). Eg. if set to 16, the
                             address of each element (plane) in "pixel_data" will
                             be divisible by 16. Should be avoided if possible for performance reasons.

 * "YUV_sampling"     : WEED_SEED_INT : Sampling type for YUV
                                        palettes, defined
                                        below. Default is mpeg if not set.

 * "YUV_clamping"     : WEED_SEED_INT : Clamping type for YUV
                                        palettes, defined below -
                                        Host should only use unclamped
                                        if plugin prefers it. Default
                                        is clamped, if not set.

 * "YUV_subspace"     : WEED_SEED_INT : Subspace (Y'CbCr digital, Y'UV
                                        analog or BT.709) type for YUV
					Effect plugins generally can ignore this.


'''Optional leaves for channels with audio''': [[BR]]

 See the weed AUDIO extension.






== PLANT TYPE CHANNEL ==

Plant type channel is used as a fixation of channel plants that the
host sets and plugin reads to know what it is getting. All leaves
SHOULD be set readonly for the plugin by the host.


Channels MUST be added in the order of channel_templates, bearing in
mind the template leaves "optional" and "max_repeats". After
initialisation, channels MUST NOT be added or removed without reinitialising the plugin.

 * "type" == WEED_PLANT_CHANNEL

'''Mandatory leaves for all channel plants''': [[BR]]
 * "template" : WEED_SEED_PLANTPTR : Pointer to a channel
 template plant this channel instance is based on.

'''Mandatory leaves for channel plants with video''': [[BR]]
 * "timecode" : WEED_SEED_INT64 : video frame time in ticks (1/100 of a microsecond) for this channel
 * "width" : WEED_SEED_INT    : The chosen frame width in pixels. For
  YUV packed type palettes, the width is in macropixels (e.g for
  WEED_PALETTE_UYVY888, it is the width in UYVY macropixels). For
  planar YUV palettes, it is measured in the Y plane.
 * "height" : WEED_SEED_INT   : The chosen height in pixels
 * "current_palette" : WEED_SEED_INT: The chosen palette, which must be one of the palettes contained in "palette_list" of a channel template
 * "pixel_data" : WEED_SEED_VOIDPTR    : array of n pointers to
 the image pixel data. Depending on the value of "current_palette",  there is 1 element for packed palettes, >1 elements for planar palettes
 * "rowstrides" : WEED_SEED_INT     : array carrying the row width of EACH PLANE in bytes (include padding). Number of elements
 must match with number of elements in "pixel_data".

'''Mandatory leaves for channel plants with audio''': [[BR]]

 See the weed AUDIO extension.

'''Optional leaves for all channel plants''': [[BR]]
 * "disabled"     : WEED_SEED_BOOLEAN : the host MAY set this to
                    WEED_TRUE before calling init_func() if the corresponding channel template
                    has "optional" leaf set to true. Host MUST NOT change this without
                    reinitialising the instance. The one exception is if
		    the channel is based on a template which has
		    "max_repeats" set, in which case a channel from
		    that template may be disabled at any time between
		    processing calls.

 * "flags"        : channel flags set by host. e.g WEED_CHANNEL_ALPHA_PREMULT.


 * Every filter can have its internal data stored in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys
 prefixed with "plugin_". The plugin is responsible for weed_free()ing
 any memory buffers in the deinit_func.

'''Optional leaves for channel plants with video''': [[BR]]

 * "offset" : WEED_SEED_INT : host can achieve multithreading by splitting destination frames into slices, calling the 
   	      		      process_func several times with different "offset"s and reduced height in the 
			      destination channel. Offset is the number of rows offset of "pixel_data" in the destination 
			      frame(s). Will only be used if the plugin sets the filter flag bit WEED_FILTER_HINT_MAY_THREAD.

 * "pixel_aspect_ratio"   : WEED_SEED_DOUBLE : physical aspect ratio
                                               of the pixel of the image (pixel aspect ratio 
                                               different than 1.0
                                               means pixels are non-square) [set by host]


If the plugin sets any of these in the channel_template, and the host is using a YUV
"current_palette", host should try to match plugin preference where
possible, and process video accordingly:

 * "YUV_sampling"     : WEED_SEED_INT : Preferred sampling type for YUV
                                        palettes, host should try to
                                        match if plugin set it in template

 * "YUV_clamping"     : WEED_SEED_INT : Preferred clamping type for YUV
                                        palettes, host should try to
                                        match if plugin set it in template

 * "YUV_subspace"     : WEED_SEED_INT : Preferred YUV Subspace (see below)
                                        type for YUV palettes, host should try to
                                        match if plugin set it in template
					Generally not needed.


For RGB type channels:

 * "gamma_type" : WEED_SEED_INT : (optional) [api 200 and above]
   		  		  	     set by the host to indicate the gamma function of the RGB(A)
					     colour space in which the channel operates.
   		  		  	     If not set, it can be assumed to be WEED_GAMMA_SRGB.

					     * If the plugin set the filter flag bit WEED_FILTER_HINT_LINEAR_GAMMA,
					     then the host may set this to WEED_GAMMA_LINEAR.




'''Optional leaves for channel plants with audio''': [[BR]]

 See the weed AUDIO extension.






== PLANT TYPE PARAMETER_TEMPLATE ==

Plant type parameter_template is used as a description of a single
parameter (input or output) filter can handle. All leaves SHOULD be set readonly for the plugin by the host after
weed_setup(). Host should only change the "default" value to a valid
value for the parameter. The host should not change any other leaves.

'''Mandatory leaves''': [[BR]]
 * "name" : WEED_SEED_STRING  : name of the parameter, MUST be unique across the in_parameters/out_parameters

 * "default" : default value(s) of the parameter : usually must contain at
               least one element, but may have 0 elements for parameters which have
               the WEED_PARAMETER_VARIABLE_ELEMENTS flag set. [0 elements means the leaf
	       exists but has no value, since the SEED_TYPE must be known.]. Required even for out parameters, as the type
	       and number of elements must be known.

 * "new_default" : required only for in parameters which have the flag WEED_PARAMETER_VARIABLE_ELEMENTS set. 
                   It tells the host the default value of
                   new elements which may be added. It should have 1
                   value, except for COLOR parameters which may
                   additionally have 3 or 4 values depending on the "colorspace".
		   Required for in parameters only.


 * "hint" : WEED_SEED_INT : subdivides parameters into different kinds
 [see below]

'''Optional leaves''':[[BR]]
 * "flags"            : WEED_SEED_INT : bitmap of parameter flags

 * "description"      : WEED_SEED_STRING : parameter description

 * "interpolate_func" : WEED_SEED_VOIDPTR : pointer to interpolate_func pointer.
   		      	 See below, Plugin Functions. For in parameters only.

 * "gui" : WEED_SEED_PLANTPTR : each parameter_template (for in_parameters) can have a
 "gui" leaf. This leaf points to a plant of type
 GUI. Within the GUI plant can be additional leaves to assist the host
 to display this particular parameter. The plugin can create it, and
 set leaf values in it in weed_setup() and/or in init_func().

 * Every filter can have internal data stored in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys prefixed with "plugin_". The plugin is responsible for weed_free()ing
 any memory buffers in the deinit_func.


==== PARAMETER HINTS ====

The "hint" is a mandatory WEED_SEED_INT leaf of every parameter; the defined values are:

 * WEED_HINT_UNSPECIFIED
 * WEED_HINT_INTEGER
 * WEED_HINT_FLOAT
 * WEED_HINT_TEXT
 * WEED_HINT_SWITCH
 * WEED_HINT_COLOR

Depending on the "hint" parameter seed type additional leaves are:

 * WEED_HINT_UNSPECIFIED
This is a special "placeholder" value and requires no mandatory leaves.


 * WEED_HINT_INTEGER
"value" and "default" are constrained by min and max: min <= value <= max
The "default" leaf can only be of seed type WEED_SEED_INT. "default"
may have any number of elements.

 * "min" : WEED_SEED_INT : minimal value of the parameter, MANDATORY for in parameters (optional for out parameters)
 * "max" : WEED_SEED_INT : maximal value of the parameter, MANDATORY for in parameters (optional for out parameters)
 * "wrap" : WEED_SEED_BOOLEAN : WEED_TRUE indicates that the "value" should wrap when going below min or above max, OPTIONAL
 * "transition" : WEED_SEED_BOOLEAN : WEED_TRUE Indicates that this
 parameter is a transition, (i.e. at min the effect is fully "off", showing only the first in_channel as output, at
 max it is fully "on", showing only the second in_channel as output) OPTIONAL. For in parameters only.

 * WEED_HINT_FLOAT
"value" and "default" are constrained by min and max: min <= value <= max
The "default" leaf can only be of seed type
WEED_SEED_DOUBLE. "default" may have any number of elements.

Additional leaves that hint causes:
 * "min" : WEED_SEED_DOUBLE : minimal value of the parameter, MANDATORY for in parameters (optional for out parameters)
 * "max" : WEED_SEED_DOUBLE : maximal value of the parameter, MANDATORY for in parameters (optional for out parameters)
 * "wrap" : WEED_SEED_BOOLEAN : WEED_TRUE indicates that the "value" should be wrapped when going below min or above max, OPTIONAL
 * "transition" : WEED_SEED_BOOLEAN : WEED_TRUE Indicates that this
 parameter is a transition, (i.e. at min the effect is fully "off", showing only the first in_channel as output, at
 max it is fully "on", showing only the second in_channel as output) OPTIONAL. For in parameters only.


 * WEED_HINT_TEXT
Hint text means a string, which can be used for passing strings.
The "default" leaf can only be of seed type
WEED_SEED_STRING. "default" may have any number of elements.

 * WEED_HINT_SWITCH 
Hint switch can be used for passing yes/no choices.
The "default" leaf can only be of seed type
WEED_SEED_BOOLEAN. "default" may have any number of elements. It may
only take values WEED_TRUE and WEED_FALSE.

Additional leaves that hint causes:
 * "group" : WEED_SEED_INT : for all in_parameters with the same
 non-zero group: the template "default" may only have a
 single value, and WEED_PARAMETER_VARIABLE_ELEMENTS may not be set. 
 Only one parameter per non-zero group may have a "default" of WEED_TRUE. 
 The host must ensure that only one parameter per non-zero group has a 
 "value" of WEED_TRUE. 

 
 * WEED_HINT_COLOR
Hint color can be used for passing colors. Colors are represented as a
list of elements of type WEED_SEED_DOUBLE or WEED_SEED_INT. Depending on the
"default", host knows the seed type of "value".

Additional leaves that hint causes:
 * "min" : WEED_SEED_DOUBLE or WEED_SEED_INT; array of N elements: minimal value of the parameter, MANDATORY for in parameters (optional for out parameters)
 * "max" : WEED_SEED_DOUBLE or WEED_SEED_INT; array of N elements: maximal value of the parameter, MANDATORY for in parameters (optional for out parameters)
 * "colorspace" : WEED_SEED_INT : colorspace (see below), MANDATORY
 * "gamma_type" : WEED_SEED_INT : (optional) [api 200 and above] 
   		  		  	     If the plugin set the flag WEED_FLAG_LINEAR_GAMMA, 
					     then this leaf can be set to WEED_GAMMA_SRGB to indicate the parameter values are in
					     the SRGB colourspace. Otherwise it is ignored by the host.


==== Number of elements in the leaves ====
The "default" leaf must contain at least one value* UNLESS the plugin sets the parameter flag
WEED_PARAMETER_VARIABLE_ELEMENTS (see below); then the "default" may
take any number (0 or more) of elements,  [0 elements means the leaf
exists but has no value, since the SEED_TYPE must be known], and
"new_default" must be set.

The number of elements in "value" MUST match the number of elements in
"default" UNLESS the plugin sets the parameter flag
WEED_PARAMETER_VARIABLE_ELEMENTS (see below); then the "value" may
take any number (0 or more) of elements, [0 elements means the leaf
exists but has no value, since the SEED_TYPE must be known], and
"new_default" must be set.

The only exception is for "COLOR" parameters; there the number of
elements in "default" and "value" MUST always be a multiple of 3 or 4
(depending on the "colorspace") - the multiple must be 1 or higher unless WEED_PARAMETER_VARIABLE_ELEMENTS is set, in which case it may be 0 or higher.

The number of elements in each of "min" and "max" can be either 1, or equal to
the number of elements in "default". If the plugin sets the flag
WEED_PARAMETER_VARIABLE_ELEMENTS for the parameter, then the number of elements in each of "min" and "max" may only
be 1.

Note:

There is a further exception for "COLOR" parameters; there the number of
elements in "min" and "max" may be:

1 (each element uses the same min and/or max)
n (where n is 3 or 4 depending on colorkey)
N (where N is a multiple of 3 or 4, matching the number of elements in "default").

The last option is not valid if the parameter has the flag bit
WEED_PARAMETER_VARIABLE_ELEMENTS set.



* It is highly recommended to use exactly one value (or 3 or 4 values for color type parameters) for "default", 
  unless WEED_PARAMETER_VARIABLE_ELEMENTS is set.







== PLANT TYPE PARAMETER ==

Input parameter leaves should only be changed by the host, and
output parameter "value" only by the plugin. Parameters MUST match
one to one with parameter templates (same order, same number). For output 
parameters, the host should create the parameters from their templates, but not set the "value" leaf.


'''Mandatory leaves''': [[BR]]
 * "template" : WEED_SEED_PLANTPTR : pointer to the parameter template

 * "value" : seed type of the value MUST match the type of "default"
	     leaf of the parent_template. Lists/arrays can be implemented by
	     setting multiple elements in "default" (fixed list length), 
	     or by setting the parameter flag bit WEED_PARAMETER_VARIABLE_ELEMENTS
	     (variable list length). 

	     For out parameters:
	      this leaf is set by the plugin, first in init_func
	     (where it should be set to the default), then in process_func. If it holds one or more strings,
	     or an array, it must be set to NULL in the deinit_function (to avoid leaking memory)


'''Optional leaves''':[[BR]]
 * "timecode" : WEED_SEED_INT64 : time in ticks (1/100 of a
				  microsecond) used in "interpolate_func"; or for out parameters, the
				  timecode when the "value" was last set.

 * "ignore" : array of WEED_SEED_BOOLEAN : for interpolation of in parameters with
	      multiple elements in "value", "ignore" can be used to block "value"
	      elements which are to be ignored at that timecode. Thus, if
	      present, the number of elements in "ignore" should match the number of elements in
	      "value" at the timecode (except for COLOR parameters,
	      where the number of elements in "ignore" is divided by 3
	      or 4 depending on "colorspace"). A setting of WEED_TRUE indicates the
	      corresponding element in "value" should *not* be considered an
	      interpolation point (i.e. it is just a "filler" element).

 * "gamma_type" : WEED_SEED_INT : [api 200 and above]
   		  		  if the plugin set the WEED_FILTER_LINEAR_GAMMA flag, and the parameter hint is
				  WEED_HINT_COLOR, then the host will set this to indicate the gamma function of the RGB(A)
				  colour space in which the parameter operates.
   		  		  If not set, it can be assumed to be WEED_GAMMA_SRGB.

 * Every filter can have its internal data stored in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys
 prefixed with "plugin_". The plugin is responsible for weed_free()ing
 any memory buffers in the deinit_func.







== PLANT_TYPE_GUI ==

This plant type has differing properties depending on whether it is
referenced from (i.e. contained in) filter_instance or from a parameter_template.

==== filter_class GUI ====
Plugin may set any of these leaves in weed_setup(). After this they should be set READONLY for the plugin.

'''Mandatory leaves''': [[BR]]
 * "layout_scheme" : WEED_SEED_STRING : string defining the layout
 scheme used in the rest of the plant

'''Optional leaves''': [[BR]]

 * "icon"         : WEED_SEED_STRING : name of the associated icon (if
                                       any) in the icons subdirectory [see below - Plugin locations/format]

 * "hidden" : WEED_SEED_BOOLEAN : if set to WEED_TRUE, the filter
   may be hidden from user menus by the host. Intended for internal type filters.

 * other optional leaves depend on the "layout_scheme" used

 * Every filter can have its internal data stored in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys
 prefixed with "plugin_". The plugin is responsible for weed_free()ing
 any memory buffers in the deinit_func.


==== parameter_template GUI ====
Plugin may set and change these leaves in weed_setup() and/or in
init_func(). At all other times they should
be set READONLY for the plugin. If the filter is re-inited
(e.g. because a flagged parameter value was changed, or because a
channel size or palette was changed), then the
READONLY_PLUGIN flag should be cleared by the host before calling init_func(), then set again afterwards.
An exception to this is "display_value", which can be set by the
plugin whenever "display_func" (if defined) is called.

All of these leaves indicate optional functionality for the
host. For example, the plugin should not rely on setting "maxchars" to
ensure a string is constrained to certain length, neither should it
rely on setting "copy_value_to" to force the host to set indentical
"values" for two parameters.


'''Optional leaves''': [[BR]]
 * "label" : WEED_SEED_STRING : label for display

 * "use_mnemonic" : WEED_SEED_BOOLEAN : WEED_TRUE indicates whether "label" uses
    underscore as mnemonic

 * "choices" : WEED_SEED_STRING : n values for a choice: only valid
   for INT parameters, the "value" element(s) indicate the selected
   element(s);
   The actual value of "max" is ignored,
   "max" is assumed to be equal to the number of elements in "choices".
   "min" must be 0 or -1.
   For the "value", 0 indicates first element in "choices". A value of -1 (if
   allowed by "min") indicates "no selection". For non-INT parameters, this
   leaf will be ignored. If "choices" is present, then "wrap" and
   "step_size" may be ignored by the host.

 * "decimals" : WEED_SEED_INT : number of decimals for a FLOAT or
   COLOR (FLOAT) hint. For other hints this will be ignored.

 * "step_size" : seed type matches type of "default" : step value for
   INTEGER, FLOAT and COLOR type parameters : used for spin buttons, etc.

 * "maxchars" : WEED_SEED_INT : max display length in (utf-8) chars for a
   STRING hint. For other hints, this will be ignored. A value < 1 should
   also be ignored.

 * "display_func" : WEED_SEED_VOIDPTR : pointer to a function pointer that 
   returns a value
   for display. See below, Plugin Functions. This can be disabled by
   setting it to NULL.

 * "display_value" : WEED_SEED_STRING : Value to be displayed by the
   host. The plugin should only set this leaf if and when "display_func" is
   called by the host. See below, Plugin Functions.

 * "hidden" : WEED_SEED_BOOLEAN : if set to WEED_TRUE, the parameter
   may be hidden by the host.

 * "copy_value_to" : WEED_SEED_INT : index (0 means first parameter, 1
   means second, etc.)
   of another in_parameter : if the "value" of this parameter is changed, then the
   "value" of the parameter pointed to may be
   set to the same value. Both parameters MUST have the same HINT and
   number of elements in "default", otherwise this will be ignored. Only
   valid for in_parameters. If more than one parameter points to the
   same in_parameter, the behaviour is undefined. NOTE: this is not
   strictly GUI functionality. Even GUI-less hosts might want to implement
   this ! This can be disabled by setting it to a value < 0, or by
   setting it to point to itself.

 * Every filter can have its internal data stored in leaves
 inside this plant, and host MUST NOT change their values or make them
 READONLY for the plugin. Those internal leaves MUST have keys
 prefixed with "plugin_". The plugin is responsible for weed_free()ing
 any memory buffers in the deinit_func().





== PLUGIN FUNCTIONS ==

The only fixed function name the plugin MUST implement is weed_setup().

Normally, host and plugin would use utility functions to simplify the prcedure outlined below. In the simplifed version,
the host does:

weed_plant_t *plugin_info = weed_setup(weed_bootstrap_func);
if (plugin_info != NULL)

....


and the plugin does:

WEED_SETUP_START(weed_api_current_version, filter_api_current_version) {
// api_versions should be specified manually by the plugin writer, do not use the version macros directly !

.. setup the plugin info


WEED_SETUP_END;
}


Howeer the full details are described below.




==== weed_setup ====

This is the sole mandatory function which every Weed plugin must implement.

{{{
    weed_plant_t *weed_setup(weed_bootstrap_f weed_bootstrap)
}}}

The host calls this first in a plugin, and passes in a pointer to a function of type weed_bootstrap_f.

The typedef of weed_bootstrap_f is:
{{{
    weed_plant_t *weed_bootstrap_func (default_getter_f *value, int32_t weed_api_min_version, int32_t weed_api_max_version,
     int32_t weed_filter_api_min_version, weed_filter_api_max_version);
}}}


( NB: prior to API version 200, the function had a slightly different prototype:
   weed_plant_t *weed_bootstrap_func (default_getter_f *value, int32_t num_versions, int32_t *plugin_versions) )


e.g:

....
weed_setup_f setup_fn = (weed_setup_f)dlsym(handle, "weed_setup");
weed_plant_t *plugin_info = (*setup_fn)(weed_bootstrap); // using weed_bootstrap from libweed-utils



At the start of weed_setup(), the plugin must call the weed_bootstrap function, passing in a pointer to receive default_getter_f,
and the lowest and highest versions of WEED_API_VERSION and WEED_FILTER_API_VERSION it supports, the returned value will be a
host_info plant created by the host, e.g.:


  weed_default_getter_f weed_default_getf;
  weed_plant_t *host_info = (*weed_boot)(&weed_default_getf, weed_api_min_version, weed_api_max_version,
                                         weed_filter_api_min_version, weed_filter_api_max_version);




Control now returns to the host in its weed_bootstrap function.


weed_plant_t *weed_bootstrap(weed_default_getter_f *value,
			     int32_t plugin_min_weed_api_version,
			     int32_t plugin_max_weed_api_version,
			     int32_t plugin_min_filter_api_version,
			     int32_t plugin_max_filter_api_version);



The host now has a chance to review which weed and filter api versions the plugin supports and to adjust the functionality
offered to the plugin accordingly. It is for this reason that the host does not pass the host_info plant directly to the plugin
when calling weed_setup.

If the host does not support the plugin's api versions, it should return NULL from weed_bootstrap.
In this case the plugin should return NULL from the weed_setup() function, so that the host can unload it.


Otherwise, the host will set value to point to a default getter function in the host of the form:

{{{
   weed_error_t default_getter(weed_plant_t *plant, const char *key, weed_function_t *value)
}}}

and return a configured HOST_INFO plant.


If using libweed-utils, the provided weed_bootstrap will automatically check versions and set the plugin API accordingly.
Its weed_bootstrap also provides a callback to the host so that the host can adjust the configured host_info.



The plugin should call the default_getter define all of its API functions from the
host_info plant.


weed_function_t is a generic pointer-to-function, so the plugin should typecast this as
appropriate.

example:


  if ((weed_default_getf)(host_info, WEED_LEAF_GET_FUNC, (weed_function_f *)&weed_leaf_get) != WEED_SUCCESS) return NULL;


[The default getter should use only standard memory functions, so that the plugin can 
bootstrap its memory functions (weed_malloc, weed_free, weed_memcpy etc.).
There is a version implemented in the weed_utils library which the host can use.]




Normally a plugin would use a utility library which would take care of
calling the bootstrap function and setting up its API functions.

The plugin can also retrieve the "weed_api_version" and "filter_api_version" leaves to discover the API versions the host
assigned it. 

The weed_setup() function in the plugin will return a PLUGIN_INFO plant that
specifies what is the content of this plugin - which filter classes it has, who is the maintainer, etc.

The Plugin implements weed_setup() in following way: the PLUGIN INFO plant is first created by using weed_plant_new(). 
The individual filters are then created and added to the "filters" leaf in the PLUGIN INFO plant.
If no filters can be created (because of memory or other problems or version mismatches), the function should return NULL.

The returned plant MUST have '''type''' WEED_PLANT_PLUGIN_INFO.



To recap:

1) host calls weed_init() once with an API version to get its weed functions

2) host dlopens a plugin, then calls weed_setup() in the plugin, passing in a ponter to the bootstrap_fn

3) plugin calls the bootstrap_fn in the host, passing ptr to default_getter, and and min and max api versions it can support.
   The maximum versions should be set to the current version at the time the plugin is created.
   If the plugin is later updated, the max versions can be increased accordingly.

4) host selects weed and filter api versions it will provide, ensuring these are higher than the
   lowest version that the plugin supports (because it cannot know what features may be added in the future...),
   and if higher than the maximum, that the versions are compatible.
   It also sets default_getter function for plugin.
   If the host cannot support the API versions of the plugin, then it should return NULL.

   The idea is that if a plugin relies on features that the host cannot support yet, then it should not be loaded.
   In addition, if a future change breaks compatibility with the plugin, then the host has the option of using a lower API
   version so that the plugin can still run.

   Thus, it is advisable for a plugin author to set the minimum values as low as possible, and the maximum values to the current
   versions. If features were added between the highest and lowest versions, then the plugin can check the host API versions to
   discover whether or not the host supports them.

   The maximum values should be set manually and should not be set from the WEED_API_VERSION or FILTER_API_VERSION symbols,
   as these may increase each time the plugin is compiled. It may be that a future API version breaks compatibility and
   the host will assume that the plugin can handle the changes.



5) after returning from weed_bootstrap, the plugin should check the API version returned by the host,
   and use the default_getter function to bootstrap itself and then fetch the appropriate functions for that API version.




6) plugin then sets up its plugin_info plant and returns it as the value from weed_setup()



This may seem complex, but it provides several advantages:

- each API version can have its own set of core functions

- host and plugin can negotiate the plugin API version and select the highest version which they both 
  support

- function overloading can be done. The host and plugin can have functions with the same name
  but which actually resolve to different functions (for example, host and plugin both use
  weed_leaf_set, but the the host can set this to point to a different version of the function, for example to debug a particular
  plugin.

- the host can have access to functions which the plugin cannot, for example, only the host 
  can call weed_leaf_delete, (unlocked) weed_plant_free and weed_leaf_set_flags




==== init_func ====
This is an optional function in Weed.


{{{
    int init_func(weed_plant_t *filter_instance)
}}}

The host calls this and passes in the desired filter_instance.
The filter plant instance passed to the init_func MUST have been
correctly setup to match the filter class it relates to, 
this means that all the mandatory leaves of input and output channels and of input parameters MUST be set.
The function returns a weed error code (see below).

The init_func() function allows the plugin to create any internal
memory structures it needs; the plugin can store internal data as
leaves that have keys prefixed with "plugin_" in the filter_instance 
(see the definition of filter instance plant). The plugin can also (re)set
the "gui" settings for parameter_templates (see below).




==== process_func ====
This is a mandatory function in Weed.

{{{
    int process_func(weed_plant_t *filter_instance, long timestamp)
}}}

Host calls this for each processing cycle; the plugin can do its frame
processing here. The function returns a weed error code (see
below). Timestamp is the presentation time in ticks (1/100 of a microsecond) (can be e.g. time since playback start). The function returns a weed error code (see below). 



==== deinit_func ====
This is an optional function in Weed.


{{{
    int deinit_func(weed_plant_t *filter_instance)
}}}

The host will call this to allow the plugin to free() any internal
memory. Following this the host may free() the filter_instance
plant. The plugin does not need to free any plants or leaves; the host should take care of this.




==== weed_desetup ====
This is an optional function in Weed.

{{{
    void weed_desetup(void);
}}}

If the plugin has this function, the host should call it before
unloading the plugin. This is to allow the plugin to reset any
hardware, etc.




==== display_func ====
This is an optional function in Weed.

{{{
    void display_func(weed_plant_t *parameter);
}}}

For the given parameter, the plugin should examine its "value", get
its "template" leaf, get the "gui" leaf from this, and finally, set the
"display_value" in the "gui". The "display_value" should be of
seed_type WEED_SEED_STRING.  This "display_value" should be displayed
by the host instead of the normal parameter "value". 
"display_func" is an optional leaf of a parameter_template "gui". 
The host MUST ensure that "display_value" is writable by the plugin
before calling display_func(), and should set it readonly for the
plugin afterwards.




==== interpolate_func ====
This is an optional function in Weed.

{{{
    int interpolate_func(weed_param_t **in_params, weed_param_t *out_param);
}}}

The function takes a NULL terminated array of parameters for a single
parameter_template, with "timecode","value" and possibly "ignore" 
leaves, and returns a best guess for the "value" of out_param. The
in_params array MUST be in ascending "timecode" order. The "timecode"
leaf of out_param MUST be set. All the parameter values in_params and
out_param reference the same parameter_template. Interpolate_func is
an optional leaf of that parameter_template.

The value returned is actually a boolean. A return value of WEED_TRUE
means the "value" set in out_param is exact. A return value of
WEED_FALSE means that the "value" in out_param is a guess. In the
latter case, the host can recall the function with more elements in
in_params to get a more accurate result.





== HOST FUNCTIONS ==

The host provides just one mandatory function to the plugins:
weed_bootstrap (see above for its definition).

The bootstrap function takes a list of Weed api versions supported by the
plugin, sets a getter function, and returns a host_info plant, or NULL
if none of the plugin api versions are supported.

The plugin can use the getter function to get the leaves of the host
info plant.

The HOST_INFO plant can also have other optional leaves to provide
more information about the host, and optional functions.


== OUTLINE WEED PROCESS FLOW OVERVIEW ==

 * Host calls weed_init(), passing in the weed api version it wants to use. If successful, the function sets the core Weed functions
   for the host.

 *  Host loads plugin (using dlopen)

 *  Host calls the weed_setup() function in the plugin, passing in a pointer to the bootstrap function (normally this would be
    weed_bootstrap in the weed-utils library.

 *  plugin calls the bootstrap function, passing an address to return the default getter function, as well as the minimum and
    maximum weed and filter api versions the plugin supports. The library checks weed and filter api_versions supported by
    the plugin. If either host version is less then the plugin minumin version the plugin
    cannot be loaded. If one or both of the values are greater than the maximum, the library checks for compatibility.
    If the host version and plugin version are incompatible, the plugin cannot be loaded so NULL is returned. Otherwise it is OK
    to proceed. The weed_boostrap function will create a HOST_INFO plant and set leaves with the host api versions,
    pointers to the functions the plugin should use, and return it to the plugin, as well as setting the default getter function,
    Optionally, the library will call a callback function in the host before returning the PLUGIN_INFO, so that the host can
    check, alter or add leaves before it is returned to the plugin (TODO).


*  if the HOST_INFO is NULL, the plugin MUST return NULL from its weed_setup() function. Otherwise the plugin uses the
   default_getter to get the leaves of the HOST_INFO plant until it has enough functions defined to use the normal
   Weed get function for its weed api version. Then it uses this to get the remaining leaves. Once this is done it creates a
   PLUGIN_INFO plant. All this would normally be done in the weed-plugin-utils library, weed_plugin_info_init().




All of this is simplified by the Weed utility libraries. The host simply calls weed_setup() in the plugin, passing in
weed_bootstrap as the only parameter, and receives back a PLUGIN_INFO.


On the plugin side, a simple macro taking 2 parameters, the maximum weed and filter APIs supported, may be used to call the
bootstrap function and initialise the PLUGIN_INFO, returning NULL to the host if it is NULL. The minimum API versions are assumed
to be equal to the maximum versions. A different variation of the macro can be used which takes an additional 2 parameters if the
plugin author wants to specify lower minimum values.





When host wants to use the plugin,

 * Host creates a FILTER_INSTANCE: Host examines the in_channel and out_channel plants, and sets the "disabled" flag for any optional channels it does not wish to use. It also checks "palette_list", selects a palette it would like to start using on that channel and sets the chosen value in the "current_palette" leaf. It also sets the sizes ("width" and "height" leaves) if the plugin left them as zero. All input parameters have to have values set at this point. This means host now has a plant that it will instantiate.

 * Host calls init_func() [if it exists] from the filter info plant, passing a pointer to a FILTER_INSTANCE it would like to instantiate.

* Plugin now knows the channel sizes, palettes and which channels are in use. The plugin may now weed_malloc() internal data.

 * Host may now change parameter values (respecting "max" and "min" leaves) and it after that it may call process_func() in the plugin, passing in the initialised FILTER_INSTANCE. 
 * When the host has finished with the FILTER_INSTANCE, or if it needs
   to re-initialise it, the host must call deinit_func() in the plugin
 [if the plugin has one], passing in a pointer to the FILTER_INSTANCE. The plugin MUST now weed_free() any internally allocated data.

 * Host can now weed_plant_free() the FILTER_INSTANCE, or it can reuse the FILTER_INSTANCE by calling init_func() once more.




== Plugin locations ==

The list of directories to be searched can be set in the environment
variable WEED_PLUGIN_PATH; directories in WEED_PLUGIN_PATH should be separated by
colons (:) the indicated directory and one level of subdirectories
should be searched for each entry. The directories should be searched
in order, first to last, and any effects with duplicate Hashnames may
be ignored. [See hashnames, below].

Icons for each filter may be placed in a /icons subdirectory.

Redonly data files for each filter may be placed in a /data subdirectory.
The host must run all plugin functions from within the directory above it, so that the plugin can easily 
find its data files as data/file. In case the plugin needs to write to a file, it should either request a directory 
location from the user (as a parameter), or else use (a subdirectory of) /tmp.

Note: There is no need for API versioning of the weed directories themselves, as the
weed_bootstrap system takes care of different Weed API versions.





== Weed Hashnames ==

T.B.D


== WEED FLAGS AND TYPES ==


==== Plant types ====

  * WEED_PLANT_HOST_INFO          255

  * WEED_PLANT_PLUGIN_INFO        1

  * WEED_PLANT_FILTER_CLASS       2

  * WEED_PLANT_FILTER_INSTANCE    3

  * WEED_PLANT_CHANNEL_TEMPLATE   4

  * WEED_PLANT_PARAMETER_TEMPLATE 5

  * WEED_PLANT_CHANNEL            6

  * WEED_PLANT_PARAMETER          7

  * WEED_PLANT_GUI                8

  * WEED_PLANT_EVENT              256

  * WEED_PLANT_EVENT_LIST         257



==== Weed parameter hints ====

 * WEED_HINT_UNSPECIFIED  0
   Parameter is of an unknown type. Plugins should never use this
   directly, it is intended only for wrapper plugins which may need to
   convert unknown parameter types. These parameter types may or may not
   have "min" and "max". They will have at least "name" and "default" leaves.

 * WEED_HINT_INTEGER  1

 * WEED_HINT_FLOAT  2

 * WEED_HINT_TEXT  3

 * WEED_HINT_SWITCH  4

 * WEED_HINT_COLOR  5

Parameter hints >= 1024 are reserved for custom parameters.



==== Weed colorspaces ====
 // Used for WEED_HINT_COLOR parameters.

* WEED_COLORSPACE_RGB  1

 * WEED_COLORSPACE_RGBA  2

Colorspaces >= 1024 are reserved for custom color spaces.







==== Weed palette types ====

Some palettes have aliases; these are shown on the same line.

'''Special Palettes'''
Palette number 0
{{{
WEED_PALETTE_END
may be used in setup_func() in an int *palettes, denotes the end of the palette list; "palette_list" property
}}}

'''RGB Palettes'''
Palette numbers >0 and <512
{{{
WEED_PALETTE_RGB888         WEED_PALETTE_RGB24   1  :: packed, 8 bits per colour channel, 24 bits per pixel, RGB
WEED_PALETTE_BGR888         WEED_PALETTE_BGR24   2  :: packed, 8 bits per colour channel, 24 bits per pixel, BGR
WEED_PALETTE_RGBA8888       WEED_PALETTE_RGBA32  3  :: packed, 8 bits per colour channel, 32 bits per pixel, RGBA
WEED_PALETTE_BGRA8888       WEED_PALETTE_BGRA32  7  :: packed, 8 bits per colour channel, 32 bits per pixel, BGRA
WEED_PALETTE_ARGB8888       WEED_PALETTE_ARGB32  4  :: packed, 8 bits per colour channel, 32 bits per pixel, ARGB
WEED_PALETTE_RGBFLOAT                            5  :: packed, 32 bit float per channel RGB (range is 0. to 1.)
WEED_PALETTE_RGBAFLOAT                           6  :: packed, 32 bit float per channel RGBA (range is 0. to 1.)

}}}
'''YUV Palettes'''
Palette numbers >=512 and <1024

Ranges are 16-235 for Y, 16 - 240 for U and V, unless
WEED_YUV_CLAMPING_UNCLAMPED is set in "YUV_clamping" for
channel/channel_template (in which case the range is 0 - 255 for each component).

Subspace may be any YUV subspace, unless "YUV_subspace" is set for channel/channel_template.

All channels are assumed to be 8 bit.

{{{
WEED_PALETTE_YUV422P           WEED_PALETTE_YV16    513
[Official name 'YV16', 8 bit Y plane followed by 8
   bit 2x1 subsampled U and V planes. Planar.]


WEED_PALETTE_YUV420P           WEED_PALETTE_YV12    514
[8 bit Y plane followed by 8 bit 2x2 subsampled U and V planes. Planar.
   (Official name YV12)]

WEED_PALETTE_YVU420P           WEED_PALETTE_I420         WEED_PALETTE_IYUV   515
[Same as YUV420P , but U and V are swapped. Planar.
      (Official name IYUV)]

WEED_PALETTE_YUV444P   516
[unofficial. 8 bit Y plane followed by 8 bit U and V planes, no
   subsampling. Planar.]

WEED_PALETTE_YUVA4444P   517
[Unofficial, like YUV444P but with Alpha. Planar.]

WEED_PALETTE_UYVY8888         WEED_PALETTE_UYVY     519
[YUV 4:2:2 (Y sample at every pixel, U and V sampled at every second
   pixel horizontally on each line). A macropixel contains 2 pixels in 1
   u_int32. Packed. If the "YUV_subspace" is set to bt709, this
   becomes HDYC.]

WEED_PALETTE_YUYV8888         WEED_PALETTE_YUYV          WEED_PALETTE_YUY2     518
[Like UYVY but with different component ordering within the
   u_int32 macropixel. Packed. Also known as YUY2]

WEED_PALETTE_YUV411                   WEED_PALETTE_IYU1        520
[IEEE 1394 Digital Camera 1.04 spec. Is packed YUV format
with a 6 pixel macroblock structure containing 4 pixels.
Ordering is U2 Y0 Y1 V2 Y2 Y3. Uses same bandwith as YUV420P
Used for SMPTE DV NTSC / DVCPRO PAL (???)]
Also known as IYU1.

}}}

WEED_PALETTE_YUV888                   WEED_PALETTE_IYU2      521
Packed YUV palette, no subsampling. Also known as IYU2

WEED_PALETTE_YUVA8888                                        522
Packed YUV palette with alpha channel. No subsampling.


'''Alpha Palettes'''
Palette numbers >=1024 and <2048

Alpha palettes are generally used as mask/transparency channels but may be used to store any position dependant data.

{{{
WEED_PALETTE_A1       1025
WEED_PALETTE_A8       1026
WEED_PALETTE_AFLOAT   1027
}}}

The range for AFLOAT is 0.0 (fully transparent) to 1.0 (fully opaque) for transparency. 
For other data a different range may be used.


Palette numbers >=2048 are reserved for custom palettes.


==== host plugin flags ====

 * WEED_HOST_SUPPORTS_LINEAR_GAMMA  1  [BR]] (api 200 and above)
   Denotes that the host will pay attention to the WEED_FILTER_HINT_LINEAR_GAMMA filter flag.



==== Filter_class flags ====

 *  WEED_FILTER_NON_REALTIME  1  [[BR]]
    non-realtime filter: the filter is too slow to use in realtime processing.
    Generally, filters which take more than about 0.1 second to process
    a frame are considered non-realtime.

 *  WEED_FILTER_IS_CONVERTER  2  [[BR]]
    This flag bit should be set if the plugin does not alter the image
    pixels except for resizing or palette conversion between in
    channel and out channel(s). It should only be set for the
    following types of plugins: plugins which only resize the in frame
    to out frame(s); plugins which only convert the palette from in
    frame to out frame(s), plugins which simply duplicate the in frame
    to out frame(s), and for plugins which handle only audio, where the
    plugin only alters the audio volume [see the Weed Audio
    Extension].

    It is used to assist with categorisation of the
    plugin type. To be useful, such filters may also want to use the
    *_CAN_VARY channel flags below.

 * WEED_FILTER_HINT_IS_STATELESS  4  [[BR]]
   This is optional, if the filter is stateless (i.e. not dependant on
   past calls to process_func() ) then this this flag
   bit can be set. Used for compatibility with other plugin architectures.

 * WEED_FILTER_HINT_LINEAR_GAMMA  8  [BR]] (api 200 +)

==== Channel flags =====

* WEED_CHANNEL_ALPHA_PREMULT  1  [[BR]]
    Indicates that alpha is pre-multiplied with the other channels.
    e.g RGB=0xFFFFFF. We apply an alpha of 0x80 -> we store 0x80808080 (colour vals are stored as C * alpha / 255.)
    For compatibility with applications.






==== Parameter template flags ====

 * WEED_PARAMETER_REINIT_ON_VALUE_CHANGE  1  [[BR]]
   host must reinit the plugin if the parameter "value" is
   changed. This is to allow the plugin to alter the "gui" settings
   for the parameters and for the instance. The host must temporarily
   allow the plugin read/write access to the "gui" plants during the init.
   Not valid for out parameters.


 * WEED_PARAMETER_VARIABLE_ELEMENTS  2  [[BR]]
   plugin can set this to inform the host that the number of elements in
   the parameter "value" leaf can vary. If not set, then the number of
   elements in "value" is fixed; it must always match the number of elements in
   "default".

   If this is set, then the plugin may only use one element
   in each of "min" and "max" for the parameter, except for COLOR
   parameters which may use 3 or 4 depending on the "colorspace".

   Note also that 0 is a valid number of elements. [0 elements means the leaf
   exists but has no value, since the SEED_TYPE must be known.]

   If this is set for an in parameter, the plugin MUST also set the "new_default" leaf for
   the parameter.

   This flag is assumed for out_parameters.


 * WEED_PARAMETER_ELEMENT_PER_CHANNEL  4  [[BR]] - API version 110 and higher
   This flag bit indicates that each element in the parameter "value"
   corresponds to one input channel. If a
   channel template has "max_repeats" set to other than 1, then
   WEED_PARAMETER_VARIABLE_ELEMENTS is also assumed to be set for the
   parameter, and so the "new_default" leaf must also be set [see above].
   Valid for input parameter templates only.


Flag bits >= 30 are reserved for custom flags.



==== Gamma types (api 200 and above) ====

 * WEED_GAMMA_UNKNOWN 0

 * WEED_GAMMA_SRGB 1

 * WEED_GAMMA_LINEAR 2

Gamma types >=1024 are reserved for custom color gamma types.


==== YUV sampling types ====

Where chroma subsampling is used, chroma values are assumed to be centered between luma samples, unless
specified otherwise.

 * WEED_YUV_SAMPLING_DEFAULT  0  : Default subsampling.

 * WEED_YUV_SAMPLING_JPEG  0   : Chroma is sampled at half the horizontal
   and half the vertical frequency. (YUV 4:2:0). Chroma samples are
   alternated horizontally between luma samples (like yuyv-yuyv)

 * WEED_YUV_SAMPLING_MPEG  1  : Same as JPEG, but Chroma samples are
   horizontally aligned. There is notion of fields. Note: only mpeg2 uses this, mpeg1 uses JPEG sampling.
   (YUV 4:2:0 only) (like yuvy-yuvy) (left sampling)

 * WEED_YUV_SAMPLING_DVPAL  2  : Subsampling per field, chroma samples
   are located above and below luma samples, and CB and CR samples are located on alternate lines (YUV 4:2:0) 

 * WEED_YUV_SAMPLING_DVNTSC  3  : Chroma is sampled at a reduced
   horizontal frequency but is aligned horizontally with luma samples
   (YUV 4:2:2 / YUV 4:1:1) [similar to mpeg, but vertically aligned] (top left)

Sampling types >= 1024 are reserved for custom samplings.



==== YUV clamping ====

 * WEED_YUV_CLAMPING_CLAMPED  0  :: the default if not present (clamped to 16-235,
   16-240, 16-240)                                                 

 * WEED_YUV_CLAMPING_UNCLAMPED  1  :: Y, U and V are unclamped (0 - 255 range
   for each) [used in jpeg for example]

clamping types >= 512 are reserved for custom clampings.



==== YUV subspace ====

 * WEED_YUV_SUBSPACE_YUV  0   :: Any YUV colourspace may be used, with Y representing the luma 
   channel, and U and V as colour offsets. Optional, since this is the default if not specified.

 * WEED_YUV_SUBSPACE_YCBCR   1  :: Standard YUV (Y'CbCr 601) using conversion
   factors (Kr=0.299, Kb=0.114, UV offset 128). The plugin should specify this if for example 
   it sends to or receives from external sources.

 * WEED_YUV_SUBSPACE_BT709   2  :: BT.709 high definition TV which uses different
   conversion factors than Y'CbCr digital/ananlog (Kr=0.2125, Kb=0.0721, UV offset 128)

subspace types >= 512 are reserved for custom subspaces.




==== Filter errors ====

Defined in weed-effects.h

 *  WEED_ERROR_TOO_MANY_INSTANCES   [[BR]]
    can't create: plugin allows only limited number of filter instances, returned from init_func()

 *  WEED_ERROR_HARDWARE    [[BR]]
    there was a hardware error using the filter; returned
    from init_func() or from process_func(). If returned from
    process_func(), the filter should be deinited/reinited.

 *  WEED_ERROR_INIT_ERROR    [[BR]]
    other unspecified error during initialisation

 *  WEED_ERROR_PLUGIN_INVALID    [[BR]]
    one or more of the filter_classes is no longer valid. The filter
    instance should be deinitialised and not reused; returned from process_func().


Error numbers >= 65536 are reserved for custom errors.

